";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 7 : Complex, no error"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Complex, no error, with comment
(+.3751 . ("OurScheme allows the use of '\\n', '\\t' and  '\\\"' in a string." . (3 . 4));)
) (1 . (2 . (3 . ())
   ))
(1 . (2 "Use '\"' to start and close a string." . (4
)))
(1 2 3 . +.31499)
(1 2 3 . nil)
(1 (2 . (3)) . (4))
(t () . (1 .375 3 . #f))
((1 2 3)
   (+-3.25 . 5) 
   . 
   (6 (7 . nil) 
      (8 . 9)
   )
  ) ((1 2 3)
   (4 . +25) 
   . 
   (6 (-7.#f) ((8.5)
   )
  )) (1 2 3) (++1)
    
  (1.(-2))';(1;2"3")      
    (  
 nil  
       .
    nil       
    )  
    
(((1 . -+2) 
    . (("You need to handle >>\\<<"."You also need to handle >>\"<<") 
       . 
       ((exit) . 6)
      )
   ) 
   . (7 . 8)
  )
  (exit 0)
(Hi! (exit) (How about using . (Lisp (instead of . C?))))
(define (f z)  ; a function named 'f', which has one parameter 'z'

   (let ((x 5)  ; let 'x' (a "local identifier") be 5
         (y "Hi Hello"
        )  ; let 'x' (a "local identifier") be 5
   
    (define foo (lambda (y) (bar x y)exit)) ; 'foo' is a "local" function
                                        ; for any input 'y', 
                                        ; 'foo' returns (bar x y)
                                        
    (define bar (lambda (a b) (+ (* a b) a))) ; 'bar' a local function too
                                        ; for any input pair 'a' and 'b',
                                        ; return (+ (* a b) a)
                                        
    (+ (foo (+ x 3))   ; this function 'f' calls 'foo',
       z)              ; adds its return-value with 'z' and then
                       ; return the resulting value
   )))
(The sun shines bright(
    in(the old Kentucky's home)T's summer
    (the larkies are gay).nil)-of-the-world)
(The sun shines bright(
    in(the old Kentucky's home)T's summer
    (the larkies are gay). nil)-of-the-world)
';hi
there
';hi
(there'is)
''(''('(cons 'a b)))
''(''('(cons 'a b) (c ())) (d e))
''(''('(cons'a b)(c'()))(d e))
'
   '
    ( '
       '
        ( '
           ( cons'a'b )
          ( c'(exit) )
        )
      ( d e )
    )
;(a((b(c)  
